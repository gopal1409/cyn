# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool: default
 # vmImage: ubuntu-latest
stages:
  - stage: tfvalide
    jobs: 
      - job: validate 
        steps:
        - task: TerraformInstaller@1
          inputs:
            terraformVersion: 'latest'
        - task: TerraformTaskV4@4
          displayName: Installing Terraform
          inputs:
            provider: 'azurerm'
            command: 'init'
            backendServiceArm: 'ado'
            backendAzureRmResourceGroupName: 'erraform-storage-rg'
            backendAzureRmStorageAccountName: 'terraformtfstategd'
            backendAzureRmContainerName: 'terraformstate'
            backendAzureRmKey: 'tfstate'
        - task: TerraformTaskV4@4
          displayName: validation terraform code
          inputs:
            provider: 'azurerm'
            command: 'validate'

  - stage: tfplan
    jobs: 
      - job: plan
        steps:
        - task: TerraformInstaller@1
          inputs:
            terraformVersion: 'latest'
        - task: TerraformTaskV4@4
          displayName: terraform init
          inputs:
            provider: 'azurerm'
            command: 'init'
            backendServiceArm: 'ado'
            backendAzureRmResourceGroupName: 'erraform-storage-rg'
            backendAzureRmStorageAccountName: 'terraformtfstategd'
            backendAzureRmContainerName: 'terraformstate'
            backendAzureRmKey: 'tfstate'
        - task: TerraformTaskV4@4
          inputs:
            provider: 'azurerm'
            command: 'plan'
            environmentServiceNameAzureRM: 'ado'
  - stage: tfapproval
    jobs: 
      - job: approval
        pool: server
        timeoutInMinutes: 1
        steps:
         #this job will be executed by azure
          - task: ManualValidation@1
            inputs:
              notifyUsers: 'gopal1409@gmail.com'
              instructions: 'approve this'
  - stage: tfdestroy
    jobs: 
      - job: destroy
        steps:
        - task: TerraformInstaller@1
          inputs:
            terraformVersion: 'latest'
        - task: TerraformTaskV4@4
          displayName: terraform init
          inputs:
            provider: 'azurerm'
            command: 'init'
            backendServiceArm: 'ado'
            backendAzureRmResourceGroupName: 'erraform-storage-rg'
            backendAzureRmStorageAccountName: 'terraformtfstategd'
            backendAzureRmContainerName: 'terraformstate'
            backendAzureRmKey: 'tfstate'
        
        - task: CmdLine@2
          displayName: running scan checkov
          continueOnError: true
          inputs:
            targetType: 'inline'
            script: |
              # running checkov scan
              
              echo 'running the scan'
              checkov -d .
            condition: eq(variables['Agent.JobStatus'], 'SucceededWithIssues')  
        - task: PublishTestResults@2
          inputs:
           # testResultsFormat: 'JUnit'
            testResultsFiles: '**/*scan-result.xml'
           # testRunTitle: 'checkove test result'
        - task: TerraformTaskV4@4
          displayName: Leaving Moon
          inputs:
            provider: 'azurerm'
            command: 'destroy'
            environmentServiceNameAzureRM: 'ado'
          condition: always()
        
    

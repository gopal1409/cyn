##check the version os istio
 az aks mesh get-revisions --location eastus -o table
 
Revision    Upgrades        CompatibleWith    CompatibleVersions
----------  --------------  ----------------  ----------------------------
asm-1-20    asm-1-21        kubernetes        1.25, 1.26, 1.27, 1.28, 1.29
asm-1-21    asm-1-22        kubernetes        1.26, 1.27, 1.28, 1.29, 1.30
#####create some environment variables
export CLUSTER=demoaks
export RESOURCE_GROUP=demogroup
export LOCATION=eastus
##lets create the resource group
az group create --name ${RESOURCE_GROUP} --location ${LOCATION}
##lets create teh cluster
az aks create --resource-group ${RESOURCE_GROUP} --name ${CLUSTER} --enable-asm --generate-ssh-keys --node-vm-size=standard_b2pls_v2
##we will create two deployment and expose them using cluster ip
gopal1409@gmail.com> kubectl create ns test
namespace/test created

gopal1409@gmail.com> kubectl -n test create deploy nginx1 --image=nginx:1.27 --port=80
deployment.apps/nginx1 created

gopal1409@gmail.com> kubectl -n test expose deploy nginx1 --port=80
service/nginx1 exposed

gopal1409@gmail.com> kubectl -n test create deploy nginx2 --image=nginx:1.27.0 --port=80
deployment.apps/nginx2 created

##lets create the network gateway\
kubectl apply -f - <<EOF
apiVersion: networking.istio.io/v1
kind: Gateway
metadata:
  name: my-gateway
  namespace: test
spec:
  selector:
    app: my-gateway-controller
  servers:
  - hosts:
    -  'default.svc.cluster.local'
    port:
      number: 80
      name: http
      protocol: HTTP
EOF
######################

gopal1409@gmail.com> kubectl -n test expose deploy nginx2 --port=80
service/nginx2 exposed

##check both the service is deployment with two different version of deployment
kubectl -n test get all
##lets deploy the ingress in the particular namespace
kubectl label namespace test istio.io/rev=asm-1-21
##lets do split traffic
kubectl apply -f - <<EOF
apiVersion: networking.istio.io/v1
kind: VirtualService
metadata:
  name: bookinfo-rule
  namespace: test
spec:
  hosts:
  - demo.svc.cluster.local
  
  gateways:
  - demoapp-gateway
  - mesh # applies to all the sidecars in the mesh
  http:
  - match:
    
    route:
    - destination:
        port:
          number: 80
        host: nginx1.default.svc.cluster.local
  
    route:
    - destination:
        port:
          number: 80 # can be omitted if it's the only port for reviews
        host: nginx2.default.svc.cluster.local
      weight: 80
    - destination:
        host: reviews.qa.svc.cluster.local
      weight: 20
EOF
